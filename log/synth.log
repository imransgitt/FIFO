Qflow synthesis logfile created on Tuesday 16 April 2024 03:10:10 PM IST
Running yosys for verilog parsing and synthesis
yosys  -s fifo.ys

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Executing script file `fifo.ys' --

1. Executing Liberty frontend.
Imported 32 cell types from liberty file.

2. Executing Verilog-2005 frontend: /home/imran/verilog/FIFO/source/fifo.v
Parsing Verilog input from `/home/imran/verilog/FIFO/source/fifo.v' to AST representation.
Generating RTLIL representation for module `\fifo'.
Note: Assuming pure combinatorial block at /home/imran/verilog/FIFO/source/fifo.v:28 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \fifo

3.1.2. Analyzing design hierarchy..
Top module:  \fifo
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 3 switch rules as full_case in process $proc$/home/imran/verilog/FIFO/source/fifo.v:72$33 in module fifo.
Marked 2 switch rules as full_case in process $proc$/home/imran/verilog/FIFO/source/fifo.v:60$28 in module fifo.
Marked 1 switch rules as full_case in process $proc$/home/imran/verilog/FIFO/source/fifo.v:50$18 in module fifo.
Marked 4 switch rules as full_case in process $proc$/home/imran/verilog/FIFO/source/fifo.v:34$6 in module fifo.
Removed a total of 0 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).

3.2.4. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \reset in `\fifo.$proc$/home/imran/verilog/FIFO/source/fifo.v:72$33'.
Found async reset \reset in `\fifo.$proc$/home/imran/verilog/FIFO/source/fifo.v:60$28'.
Found async reset \reset in `\fifo.$proc$/home/imran/verilog/FIFO/source/fifo.v:34$6'.

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\fifo.$proc$/home/imran/verilog/FIFO/source/fifo.v:72$33'.
     1/2: $0\wr_ptr[3:0]
     2/2: $0\rd_ptr[3:0]
Creating decoders for process `\fifo.$proc$/home/imran/verilog/FIFO/source/fifo.v:60$28'.
     1/1: $0\d_out[7:0]
Creating decoders for process `\fifo.$proc$/home/imran/verilog/FIFO/source/fifo.v:50$18'.
     1/6: $0$memwr$\memory$/home/imran/verilog/FIFO/source/fifo.v:52$1_EN[7:0]$21
     2/6: $0$memwr$\memory$/home/imran/verilog/FIFO/source/fifo.v:52$1_DATA[7:0]$20
     3/6: $0$memwr$\memory$/home/imran/verilog/FIFO/source/fifo.v:52$1_ADDR[3:0]$19
     4/6: $0$memwr$\memory$/home/imran/verilog/FIFO/source/fifo.v:54$2_EN[7:0]$24
     5/6: $0$memwr$\memory$/home/imran/verilog/FIFO/source/fifo.v:54$2_DATA[7:0]$23
     6/6: $0$memwr$\memory$/home/imran/verilog/FIFO/source/fifo.v:54$2_ADDR[3:0]$22
Creating decoders for process `\fifo.$proc$/home/imran/verilog/FIFO/source/fifo.v:34$6'.
     1/1: $0\fifo_counter[4:0]
Creating decoders for process `\fifo.$proc$/home/imran/verilog/FIFO/source/fifo.v:28$3'.
     1/2: $0\full[0:0]
     2/2: $0\empty[0:0]

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\fifo.\full' from process `\fifo.$proc$/home/imran/verilog/FIFO/source/fifo.v:28$3'.
No latch inferred for signal `\fifo.\empty' from process `\fifo.$proc$/home/imran/verilog/FIFO/source/fifo.v:28$3'.

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\fifo.\rd_ptr' using process `\fifo.$proc$/home/imran/verilog/FIFO/source/fifo.v:72$33'.
  created $adff cell `$procdff$83' with positive edge clock and positive level reset.
Creating register for signal `\fifo.\wr_ptr' using process `\fifo.$proc$/home/imran/verilog/FIFO/source/fifo.v:72$33'.
  created $adff cell `$procdff$84' with positive edge clock and positive level reset.
Creating register for signal `\fifo.\d_out' using process `\fifo.$proc$/home/imran/verilog/FIFO/source/fifo.v:60$28'.
  created $adff cell `$procdff$85' with positive edge clock and positive level reset.
Creating register for signal `\fifo.$memwr$\memory$/home/imran/verilog/FIFO/source/fifo.v:52$1_ADDR' using process `\fifo.$proc$/home/imran/verilog/FIFO/source/fifo.v:50$18'.
  created $dff cell `$procdff$86' with positive edge clock.
Creating register for signal `\fifo.$memwr$\memory$/home/imran/verilog/FIFO/source/fifo.v:52$1_DATA' using process `\fifo.$proc$/home/imran/verilog/FIFO/source/fifo.v:50$18'.
  created $dff cell `$procdff$87' with positive edge clock.
Creating register for signal `\fifo.$memwr$\memory$/home/imran/verilog/FIFO/source/fifo.v:52$1_EN' using process `\fifo.$proc$/home/imran/verilog/FIFO/source/fifo.v:50$18'.
  created $dff cell `$procdff$88' with positive edge clock.
Creating register for signal `\fifo.$memwr$\memory$/home/imran/verilog/FIFO/source/fifo.v:54$2_ADDR' using process `\fifo.$proc$/home/imran/verilog/FIFO/source/fifo.v:50$18'.
  created $dff cell `$procdff$89' with positive edge clock.
Creating register for signal `\fifo.$memwr$\memory$/home/imran/verilog/FIFO/source/fifo.v:54$2_DATA' using process `\fifo.$proc$/home/imran/verilog/FIFO/source/fifo.v:50$18'.
  created $dff cell `$procdff$90' with positive edge clock.
Creating register for signal `\fifo.$memwr$\memory$/home/imran/verilog/FIFO/source/fifo.v:54$2_EN' using process `\fifo.$proc$/home/imran/verilog/FIFO/source/fifo.v:50$18'.
  created $dff cell `$procdff$91' with positive edge clock.
Creating register for signal `\fifo.\fifo_counter' using process `\fifo.$proc$/home/imran/verilog/FIFO/source/fifo.v:34$6'.
  created $adff cell `$procdff$92' with positive edge clock and positive level reset.

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 2 empty switches in `\fifo.$proc$/home/imran/verilog/FIFO/source/fifo.v:72$33'.
Removing empty process `fifo.$proc$/home/imran/verilog/FIFO/source/fifo.v:72$33'.
Found and cleaned up 1 empty switch in `\fifo.$proc$/home/imran/verilog/FIFO/source/fifo.v:60$28'.
Removing empty process `fifo.$proc$/home/imran/verilog/FIFO/source/fifo.v:60$28'.
Found and cleaned up 1 empty switch in `\fifo.$proc$/home/imran/verilog/FIFO/source/fifo.v:50$18'.
Removing empty process `fifo.$proc$/home/imran/verilog/FIFO/source/fifo.v:50$18'.
Found and cleaned up 3 empty switches in `\fifo.$proc$/home/imran/verilog/FIFO/source/fifo.v:34$6'.
Removing empty process `fifo.$proc$/home/imran/verilog/FIFO/source/fifo.v:34$6'.
Removing empty process `fifo.$proc$/home/imran/verilog/FIFO/source/fifo.v:28$3'.
Cleaned up 7 empty switches.

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module fifo.
<suppressed ~1 debug messages>

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fifo..
Removed 0 unused cells and 27 unused wires.
<suppressed ~1 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
checking module fifo..
found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fifo.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fifo'.
<suppressed ~39 debug messages>
Removed a total of 13 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fifo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fifo.
    New ctrl vector for $mux cell $procmux$54: { }
    Consolidated identical input bits for $mux cell $procmux$57:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\memory$/home/imran/verilog/FIFO/source/fifo.v:52$1_EN[7:0]$21
      New ports: A=1'0, B=1'1, Y=$0$memwr$\memory$/home/imran/verilog/FIFO/source/fifo.v:52$1_EN[7:0]$21 [0]
      New connections: $0$memwr$\memory$/home/imran/verilog/FIFO/source/fifo.v:52$1_EN[7:0]$21 [7:1] = { $0$memwr$\memory$/home/imran/verilog/FIFO/source/fifo.v:52$1_EN[7:0]$21 [0] $0$memwr$\memory$/home/imran/verilog/FIFO/source/fifo.v:52$1_EN[7:0]$21 [0] $0$memwr$\memory$/home/imran/verilog/FIFO/source/fifo.v:52$1_EN[7:0]$21 [0] $0$memwr$\memory$/home/imran/verilog/FIFO/source/fifo.v:52$1_EN[7:0]$21 [0] $0$memwr$\memory$/home/imran/verilog/FIFO/source/fifo.v:52$1_EN[7:0]$21 [0] $0$memwr$\memory$/home/imran/verilog/FIFO/source/fifo.v:52$1_EN[7:0]$21 [0] $0$memwr$\memory$/home/imran/verilog/FIFO/source/fifo.v:52$1_EN[7:0]$21 [0] }
    Consolidated identical input bits for $mux cell $procmux$66:
      Old ports: A=8'11111111, B=8'00000000, Y=$0$memwr$\memory$/home/imran/verilog/FIFO/source/fifo.v:54$2_EN[7:0]$24
      New ports: A=1'1, B=1'0, Y=$0$memwr$\memory$/home/imran/verilog/FIFO/source/fifo.v:54$2_EN[7:0]$24 [0]
      New connections: $0$memwr$\memory$/home/imran/verilog/FIFO/source/fifo.v:54$2_EN[7:0]$24 [7:1] = { $0$memwr$\memory$/home/imran/verilog/FIFO/source/fifo.v:54$2_EN[7:0]$24 [0] $0$memwr$\memory$/home/imran/verilog/FIFO/source/fifo.v:54$2_EN[7:0]$24 [0] $0$memwr$\memory$/home/imran/verilog/FIFO/source/fifo.v:54$2_EN[7:0]$24 [0] $0$memwr$\memory$/home/imran/verilog/FIFO/source/fifo.v:54$2_EN[7:0]$24 [0] $0$memwr$\memory$/home/imran/verilog/FIFO/source/fifo.v:54$2_EN[7:0]$24 [0] $0$memwr$\memory$/home/imran/verilog/FIFO/source/fifo.v:54$2_EN[7:0]$24 [0] $0$memwr$\memory$/home/imran/verilog/FIFO/source/fifo.v:54$2_EN[7:0]$24 [0] }
  Optimizing cells in module \fifo.
Performed a total of 3 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fifo'.
Removed a total of 0 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fifo..
Removed 0 unused cells and 14 unused wires.
<suppressed ~1 debug messages>

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module fifo.

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fifo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fifo.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fifo'.
Removed a total of 0 cells.

3.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fifo..

3.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module fifo.

3.6.16. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell fifo.$add$/home/imran/verilog/FIFO/source/fifo.v:40$14 ($add).
Removed top 27 bits (of 32) from port Y of cell fifo.$add$/home/imran/verilog/FIFO/source/fifo.v:40$14 ($add).
Removed top 31 bits (of 32) from port B of cell fifo.$sub$/home/imran/verilog/FIFO/source/fifo.v:42$17 ($sub).
Removed top 27 bits (of 32) from port Y of cell fifo.$sub$/home/imran/verilog/FIFO/source/fifo.v:42$17 ($sub).
Removed top 31 bits (of 32) from port B of cell fifo.$add$/home/imran/verilog/FIFO/source/fifo.v:79$36 ($add).
Removed top 28 bits (of 32) from port Y of cell fifo.$add$/home/imran/verilog/FIFO/source/fifo.v:79$36 ($add).
Removed top 31 bits (of 32) from port B of cell fifo.$add$/home/imran/verilog/FIFO/source/fifo.v:81$39 ($add).
Removed top 28 bits (of 32) from port Y of cell fifo.$add$/home/imran/verilog/FIFO/source/fifo.v:81$39 ($add).
Removed cell fifo.$procmux$60 ($mux).
Removed cell fifo.$procmux$69 ($mux).
Removed cell fifo.$procmux$63 ($mux).
Removed cell fifo.$procmux$72 ($mux).
Removed top 7 bits (of 8) from FF cell fifo.$procdff$88 ($dff).
Removed top 7 bits (of 8) from FF cell fifo.$procdff$91 ($dff).
Removed top 27 bits (of 32) from wire fifo.$add$/home/imran/verilog/FIFO/source/fifo.v:40$14_Y.
Removed top 28 bits (of 32) from wire fifo.$add$/home/imran/verilog/FIFO/source/fifo.v:79$36_Y.
Removed top 28 bits (of 32) from wire fifo.$add$/home/imran/verilog/FIFO/source/fifo.v:81$39_Y.

3.8. Executing PEEPOPT pass (run peephole optimizers).

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fifo..
Removed 0 unused cells and 7 unused wires.
<suppressed ~1 debug messages>

3.10. Executing TECHMAP pass (map to technology primitives).

3.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

3.10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~20 debug messages>

3.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module fifo:
  creating $macc model for $add$/home/imran/verilog/FIFO/source/fifo.v:40$14 ($add).
  creating $macc model for $add$/home/imran/verilog/FIFO/source/fifo.v:79$36 ($add).
  creating $macc model for $add$/home/imran/verilog/FIFO/source/fifo.v:81$39 ($add).
  creating $macc model for $sub$/home/imran/verilog/FIFO/source/fifo.v:42$17 ($sub).
  creating $alu model for $macc $sub$/home/imran/verilog/FIFO/source/fifo.v:42$17.
  creating $alu model for $macc $add$/home/imran/verilog/FIFO/source/fifo.v:81$39.
  creating $alu model for $macc $add$/home/imran/verilog/FIFO/source/fifo.v:79$36.
  creating $alu model for $macc $add$/home/imran/verilog/FIFO/source/fifo.v:40$14.
  creating $alu cell for $add$/home/imran/verilog/FIFO/source/fifo.v:40$14: $auto$alumacc.cc:474:replace_alu$96
  creating $alu cell for $add$/home/imran/verilog/FIFO/source/fifo.v:79$36: $auto$alumacc.cc:474:replace_alu$99
  creating $alu cell for $add$/home/imran/verilog/FIFO/source/fifo.v:81$39: $auto$alumacc.cc:474:replace_alu$102
  creating $alu cell for $sub$/home/imran/verilog/FIFO/source/fifo.v:42$17: $auto$alumacc.cc:474:replace_alu$105
  created 4 $alu and 0 $macc cells.

3.12. Executing SHARE pass (SAT-based resource sharing).

3.13. Executing OPT pass (performing simple optimizations).

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fifo.

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fifo'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fifo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fifo.
Performed a total of 0 changes.

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fifo'.
Removed a total of 0 cells.

3.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fifo..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module fifo.

3.13.9. Finished OPT passes. (There is nothing left to do.)

3.14. Executing FSM pass (extract and optimize FSM).

3.14.1. Executing FSM_DETECT pass (finding FSMs in design).

3.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fifo..

3.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fifo.

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fifo'.
Removed a total of 0 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fifo..

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY pass.

3.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).
Checking cell `$memwr$\memory$/home/imran/verilog/FIFO/source/fifo.v:52$40' in module `\fifo': merged $dff to cell.
Checking cell `$memwr$\memory$/home/imran/verilog/FIFO/source/fifo.v:54$41' in module `\fifo': merged $dff to cell.
Checking cell `$memrd$\memory$/home/imran/verilog/FIFO/source/fifo.v:54$27' in module `\fifo': no (compatible) $dff found.
Checking cell `$memrd$\memory$/home/imran/verilog/FIFO/source/fifo.v:64$31' in module `\fifo': no (compatible) $dff found.

3.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fifo..
Removed 5 unused cells and 5 unused wires.
<suppressed ~6 debug messages>

3.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).
Populating enable bits on write ports of memory fifo.memory with aync read feedback:
  Analyzing write port $memwr$\memory$/home/imran/verilog/FIFO/source/fifo.v:52$40.
  Analyzing write port $memwr$\memory$/home/imran/verilog/FIFO/source/fifo.v:54$41.
    Added enable logic for 1 different cases.
Consolidating write ports of memory fifo.memory by address:
  New clock domain: posedge \clk
    Port 0 ($memwr$\memory$/home/imran/verilog/FIFO/source/fifo.v:52$40) has addr \wr_ptr.
      Active bits: 11111111
    Port 1 ($memwr$\memory$/home/imran/verilog/FIFO/source/fifo.v:54$41) has addr \wr_ptr.
      Active bits: 11111111
      Merging port 0 into this one.
      Creating logic for merging DATA and EN ports.
      Active bits: 11111111

3.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fifo..

3.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).
Collecting $memrd, $memwr and $meminit for memory `\memory' in module `\fifo':
  $memwr$\memory$/home/imran/verilog/FIFO/source/fifo.v:54$41 ($memwr)
  $memrd$\memory$/home/imran/verilog/FIFO/source/fifo.v:54$27 ($memrd)
  $memrd$\memory$/home/imran/verilog/FIFO/source/fifo.v:64$31 ($memrd)

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fifo..

3.18. Executing OPT pass (performing simple optimizations).

3.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fifo.
<suppressed ~21 debug messages>

3.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fifo'.
Removed a total of 0 cells.

3.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fifo..
Removed 2 unused cells and 14 unused wires.
<suppressed ~5 debug messages>

3.18.5. Finished fast OPT passes.

3.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).
Mapping memory cell \memory in module \fifo:
  created 16 $dff cells and 0 static cells of width 8.
  read interface: 0 $dff and 30 $mux cells.
  write interface: 16 write mux blocks.

3.20. Executing OPT pass (performing simple optimizations).

3.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fifo.
<suppressed ~8 debug messages>

3.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fifo'.
Removed a total of 0 cells.

3.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fifo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $memory\memory$rdmux[0][3][7]$219.
    dead port 2/2 on $mux $memory\memory$rdmux[0][3][7]$219.
    dead port 1/2 on $mux $memory\memory$rdmux[0][3][6]$216.
    dead port 2/2 on $mux $memory\memory$rdmux[0][3][6]$216.
    dead port 1/2 on $mux $memory\memory$rdmux[0][3][5]$213.
    dead port 2/2 on $mux $memory\memory$rdmux[0][3][5]$213.
    dead port 1/2 on $mux $memory\memory$rdmux[0][3][4]$210.
    dead port 2/2 on $mux $memory\memory$rdmux[0][3][4]$210.
    dead port 1/2 on $mux $memory\memory$rdmux[0][3][3]$207.
    dead port 2/2 on $mux $memory\memory$rdmux[0][3][3]$207.
    dead port 1/2 on $mux $memory\memory$rdmux[0][3][2]$204.
    dead port 2/2 on $mux $memory\memory$rdmux[0][3][2]$204.
    dead port 1/2 on $mux $memory\memory$rdmux[0][3][1]$201.
    dead port 2/2 on $mux $memory\memory$rdmux[0][3][1]$201.
    dead port 1/2 on $mux $memory\memory$rdmux[0][3][0]$198.
    dead port 2/2 on $mux $memory\memory$rdmux[0][3][0]$198.
    dead port 1/2 on $mux $memory\memory$rdmux[0][2][3]$195.
    dead port 2/2 on $mux $memory\memory$rdmux[0][2][3]$195.
    dead port 1/2 on $mux $memory\memory$rdmux[0][2][2]$192.
    dead port 2/2 on $mux $memory\memory$rdmux[0][2][2]$192.
    dead port 1/2 on $mux $memory\memory$rdmux[0][2][1]$189.
    dead port 2/2 on $mux $memory\memory$rdmux[0][2][1]$189.
    dead port 1/2 on $mux $memory\memory$rdmux[0][2][0]$186.
    dead port 2/2 on $mux $memory\memory$rdmux[0][2][0]$186.
    dead port 1/2 on $mux $memory\memory$rdmux[0][1][1]$183.
    dead port 2/2 on $mux $memory\memory$rdmux[0][1][1]$183.
    dead port 1/2 on $mux $memory\memory$rdmux[0][1][0]$180.
    dead port 2/2 on $mux $memory\memory$rdmux[0][1][0]$180.
    dead port 1/2 on $mux $memory\memory$rdmux[0][0][0]$177.
    dead port 2/2 on $mux $memory\memory$rdmux[0][0][0]$177.
Removed 30 multiplexer ports.
<suppressed ~20 debug messages>

3.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fifo.
Performed a total of 0 changes.

3.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fifo'.
Removed a total of 0 cells.

3.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fifo..
Removed 0 unused cells and 67 unused wires.
<suppressed ~1 debug messages>

3.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module fifo.

3.20.9. Rerunning OPT passes. (Maybe there is more to do..)

3.20.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fifo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~20 debug messages>

3.20.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fifo.
Performed a total of 0 changes.

3.20.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fifo'.
Removed a total of 0 cells.

3.20.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.20.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fifo..

3.20.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module fifo.

3.20.16. Finished OPT passes. (There is nothing left to do.)

3.21. Executing TECHMAP pass (map to technology primitives).

3.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=4\Y_WIDTH=4 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=5\B_WIDTH=1\Y_WIDTH=5 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=5\Y_WIDTH=5 for cells of type $alu.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=4 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=5 for cells of type $lcu.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~439 debug messages>

3.22. Executing OPT pass (performing simple optimizations).

3.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fifo.
<suppressed ~97 debug messages>

3.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fifo'.
<suppressed ~36 debug messages>
Removed a total of 12 cells.

3.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fifo..
Removed 14 unused cells and 135 unused wires.
<suppressed ~15 debug messages>

3.22.5. Finished fast OPT passes.

3.23. Executing ABC pass (technology mapping using ABC).

3.23.1. Extracting gate netlist of module `\fifo' to `<abc-temp-dir>/input.blif'..
Extracted 406 gates and 558 wires to a netlist network with 151 inputs and 151 outputs.

3.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        2
ABC RESULTS:            ANDNOT cells:       17
ABC RESULTS:              AOI3 cells:        2
ABC RESULTS:               MUX cells:      272
ABC RESULTS:              NAND cells:        6
ABC RESULTS:               NOR cells:        2
ABC RESULTS:               NOT cells:        7
ABC RESULTS:              OAI3 cells:        1
ABC RESULTS:                OR cells:       37
ABC RESULTS:             ORNOT cells:        5
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:               XOR cells:       14
ABC RESULTS:        internal signals:      256
ABC RESULTS:           input signals:      151
ABC RESULTS:          output signals:      151
Removing temp directory.

3.24. Executing OPT pass (performing simple optimizations).

3.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fifo.
<suppressed ~56 debug messages>

3.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fifo'.
Removed a total of 0 cells.

3.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fifo..
Removed 2 unused cells and 279 unused wires.
<suppressed ~3 debug messages>

3.24.5. Finished fast OPT passes.

3.25. Executing HIERARCHY pass (managing design hierarchy).

3.25.1. Analyzing design hierarchy..
Top module:  \fifo

3.25.2. Analyzing design hierarchy..
Top module:  \fifo
Removed 0 unused modules.

3.26. Printing statistics.

=== fifo ===

   Number of wires:                372
   Number of wire bits:            525
   Number of public wires:          27
   Number of public wire bits:     163
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                513
     $_ANDNOT_                      17
     $_AND_                          2
     $_AOI3_                         2
     $_DFF_PP0_                     21
     $_DFF_P_                      128
     $_MUX_                        272
     $_NAND_                         6
     $_NOR_                          2
     $_NOT_                          5
     $_OAI3_                         1
     $_ORNOT_                        5
     $_OR_                          37
     $_XNOR_                         1
     $_XOR_                         14

3.27. Executing CHECK pass (checking for obvious problems).
checking module fifo..
found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=176.00) is a direct match for cell type $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
  create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
  create mapping for $_DFF_NN0_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NN1_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NP0_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_NP1_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_PN0_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PN1_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PP0_ from mapping for $_DFFSR_PPP_.
  create mapping for $_DFF_PP1_ from mapping for $_DFFSR_PPP_.
  final dff cell mappings:
    DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    DFFSR _DFF_NN0_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_NN1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_NP0_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_NP1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_PP0_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_PP1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFFSR_NNN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_NNP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_NPN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_NPP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S(~S));
    DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_PNP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_PPN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_PPP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S(~S));
Mapping DFF cells in module `\fifo':
  mapped 21 $_DFF_PP0_ cells to \DFFSR cells.
  mapped 128 $_DFF_P_ cells to \DFFPOSX1 cells.

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fifo.

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fifo'.
<suppressed ~60 debug messages>
Removed a total of 20 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fifo..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fifo.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fifo'.
Removed a total of 0 cells.

5.6. Executing OPT_RMDFF pass (remove dff with constant values).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fifo..
Removed 0 unused cells and 20 unused wires.
<suppressed ~1 debug messages>

5.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module fifo.

5.9. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\fifo' to `<abc-temp-dir>/input.blif'..
Extracted 365 gates and 517 wires to a netlist network with 152 inputs and 152 outputs.

6.1.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.36 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.1.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        3
ABC RESULTS:           AOI21X1 cells:      100
ABC RESULTS:           AOI22X1 cells:        3
ABC RESULTS:             INVX1 cells:       71
ABC RESULTS:            MUX2X1 cells:       29
ABC RESULTS:           NAND2X1 cells:      100
ABC RESULTS:           NAND3X1 cells:       15
ABC RESULTS:            NOR2X1 cells:       78
ABC RESULTS:           OAI21X1 cells:      165
ABC RESULTS:           OAI22X1 cells:       14
ABC RESULTS:             OR2X2 cells:        1
ABC RESULTS:           XNOR2X1 cells:        7
ABC RESULTS:            XOR2X1 cells:        1
ABC RESULTS:        internal signals:      213
ABC RESULTS:           input signals:      152
ABC RESULTS:          output signals:      152
Removing temp directory.

7. Executing FLATTEN pass (flatten design).
No more expansions possible.

8. Executing SETUNDEF pass (replace undef values with defined constants).
Removed 0 unused cells and 517 unused wires.

9. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port fifo.clk: Missing option -inpad.
Don't map input port fifo.d_in: Missing option -inpad.
Mapping port fifo.d_out using BUFX2.
Mapping port fifo.empty using BUFX2.
Mapping port fifo.fifo_counter using BUFX2.
Mapping port fifo.full using BUFX2.
Don't map input port fifo.rd_en: Missing option -inpad.
Don't map input port fifo.reset: Missing option -inpad.
Don't map input port fifo.wr_en: Missing option -inpad.

10. Executing OPT pass (performing simple optimizations).

10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fifo.

10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fifo'.
Removed a total of 0 cells.

10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fifo..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fifo.
Performed a total of 0 changes.

10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fifo'.
Removed a total of 0 cells.

10.6. Executing OPT_RMDFF pass (remove dff with constant values).

10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fifo..

10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module fifo.

10.9. Finished OPT passes. (There is nothing left to do.)

11. Executing BLIF backend.

12. Printing statistics.

=== fifo ===

   Number of wires:                599
   Number of wire bits:            763
   Number of public wires:         599
   Number of public wire bits:     763
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                751
     AND2X2                          3
     AOI21X1                       100
     AOI22X1                         3
     BUFX2                          15
     DFFPOSX1                      128
     DFFSR                          21
     INVX1                          71
     MUX2X1                         29
     NAND2X1                       100
     NAND3X1                        15
     NOR2X1                         78
     OAI21X1                       165
     OAI22X1                        14
     OR2X2                           1
     XNOR2X1                         7
     XOR2X1                          1

End of script. Logfile hash: 4695912eb7
CPU: user 0.11s system 0.27s, MEM: 19.11 MB total, 13.12 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 16% 19x opt_clean (0 sec), 13% 19x opt_expr (0 sec), ...
Running getpowerground to determine power and ground net names.
getpowerground.tcl  /usr/local/share/qflow/tech/osu018/osu018_stdcells.lef
Cleaning up output syntax
ypostproc.tcl fifo_mapped.blif fifo /usr/local/share/qflow/tech/osu018/osu018.sh vdd gnd 
Cleaning up blif file syntax
Running blifFanout (iterative)
Each iteration calls:
blifFanout -l 100 -c 20 -I fifo_nofanout -s nullstring -p /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib -b BUFX2,CLKBUF1 -i A,A -o Y,Y tmp.blif fifo.blif

blifFanout for qflow 1.3.17
Parsing library "osu018_stdcells"
End of library at line 6141
Lib Read:  Processed 6142 lines.
Top internal fanout is 66 (load 1158.24) from node _160_,
driven by INVX1 with strength 58.615 (fF driven at latency 100)
Top fanout load-to-strength ratio is 19.7601 (latency = 1976.01 ps)
Top input node fanout is 149 (load 3771.09) from node clk.
Warning 1: load of 74.5666 is 1.23294 times greater than strongest gate MUX2X1
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 8: load of 85.2695 is 1.46531 times greater than strongest gate NOR2X1
Warning 9: load of 294.935 is 5.06829 times greater than strongest gate NOR2X1
Warning 122: load of 856.268 is 14.375 times greater than strongest gate DFFSR
211 gates exceed specified minimum load.
59 buffers were added.
15 gates were changed.

Gate counts by drive strength:

	"" gates	In: 21    	Out: 21    	+0
	"1" gates	In: 711    	Out: 696    	-15
	"2" gates	In: 19    	Out: 30    	+11

Number of gates changed: 74
gates resized: 74
blifFanout for qflow 1.3.17
Parsing library "osu018_stdcells"
End of library at line 6141
Lib Read:  Processed 6142 lines.
Top internal fanout is 16 (load 615.354) from node _430_,
driven by NAND3X1 with strength 57.6186 (fF driven at latency 100)
Top fanout load-to-strength ratio is 5.61995 (latency = 561.995 ps)
Top input node fanout is 12 (load 448.696) from node clk.
Warning 1: load of 230.998 is 1.02671 times greater than strongest gate BUFX4
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 3: load of 233.907 is 1.03964 times greater than strongest gate BUFX4
Warning 5: load of 625.354 is 2.69997 times greater than strongest gate CLKBUF1
Warning 37: load of 294.935 is 5.06829 times greater than strongest gate NOR2X1
Warning 151: load of 344.76 is 5.78783 times greater than strongest gate DFFSR
235 gates exceed specified minimum load.
0 buffers were added.
55 gates were changed.

Gate counts by drive strength:

	"" gates	In: 21    	Out: 21    	+0
	"1" gates	In: 708    	Out: 708    	+0
	"2" gates	In: 77    	Out: 22    	-55
	"8" gates	In: 4    	Out: 4    	+0

Number of gates changed: 55
gates resized: 55
blifFanout for qflow 1.3.17
Parsing library "osu018_stdcells"
End of library at line 6141
Lib Read:  Processed 6142 lines.
Top internal fanout is 16 (load 615.354) from node _430_,
driven by NAND3X1 with strength 57.6186 (fF driven at latency 100)
Top fanout load-to-strength ratio is 5.61995 (latency = 561.995 ps)
Top input node fanout is 12 (load 448.696) from node clk.
Warning 1: load of 342.812 is 1.52369 times greater than strongest gate BUFX4
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 3: load of 345.721 is 1.53662 times greater than strongest gate BUFX4
Warning 7: load of 625.354 is 2.69997 times greater than strongest gate CLKBUF1
Warning 68: load of 294.935 is 5.06829 times greater than strongest gate NOR2X1
Warning 182: load of 344.76 is 5.78783 times greater than strongest gate DFFSR
266 gates exceed specified minimum load.
0 buffers were added.
0 gates were changed.

Gate counts by drive strength:

	"" gates	In: 21    	Out: 21    	+0
	"1" gates	In: 708    	Out: 708    	+0
	"2" gates	In: 22    	Out: 22    	+0
	"4" gates	In: 55    	Out: 55    	+0
	"8" gates	In: 4    	Out: 4    	+0

Number of gates changed: 0
gates resized: 0

Generating RTL verilog and SPICE netlist file in directory
	 /home/imran/verilog/FIFO/synthesis
Files:
   Verilog: /home/imran/verilog/FIFO/synthesis/fifo.rtl.v
   Verilog: /home/imran/verilog/FIFO/synthesis/fifo.rtlnopwr.v
   Verilog: /home/imran/verilog/FIFO/synthesis/fifo.rtlbb.v
   Spice:   /home/imran/verilog/FIFO/synthesis/fifo.spc

Running blif2Verilog.
Running blif2BSpice.
Running spi2xspice.py
spi2xspice.py "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" -io_time=1n -time=100p -idelay=10p -odelay=100p -cload=500f fifo.spc fifo.xspice

Synthesis script ended on Tuesday 16 April 2024 03:10:11 PM IST
